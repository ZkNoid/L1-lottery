{
  "method": "GET",
  "baseURL": "https://random-data-api.com/api/number/random_number",
  "path": "number",
  "zkapp": "import{Field as r,MerkleMap as O,Poseidon as C,PublicKey as S,SmartContract as A,State as l,Struct as b,UInt32 as k,ZkProgram as _,method as y,state as d}from\"o1js\";import{PublicKey as q,UInt64 as x}from\"o1js\";var w=x.from(10*10**9),v=480;var N=q.fromBase58(\"B62qnBkcyABfjz2cqJPzNZKjVt9M9kx1vgoiWLbkJUnk16Cz8KX8qC4\"),f=q.fromBase58(\"B62qnmsn4Bm4MzPujKeN1faxedz4p1cCAwA9mKAWzDjfb4c1ysVvWeK\");import{ZkonZkProgram as B,ZkonRequestCoordinator as g,ExternalRequestEvent as P}from\"zkon-zkapp\";var i=function(c,e,s,a){var u=arguments.length,o=u<3?e:a===null?a=Object.getOwnPropertyDescriptor(e,s):a,p;if(typeof Reflect==\"object\"&&typeof Reflect.decorate==\"function\")o=Reflect.decorate(c,e,s,a);else for(var h=c.length-1;h>=0;h--)(p=c[h])&&(o=(u<3?p(o):u>3?p(e,s,o):p(e,s))||o);return u>3&&o&&Object.defineProperty(e,s,o),o},t=function(c,e){if(typeof Reflect==\"object\"&&typeof Reflect.metadata==\"function\")return Reflect.metadata(c,e)},V=new O().getRoot(),j=_.Proof(B),R=class extends j{},m=class extends b({value:r,salt:r}){hash(){return C.hash([this.value,this.salt])}},E=f,T=S.fromBase58(\"B62qjGsPY47SMkTykivPBAU3riS9gvMMrGr7ve6ynoHJNBzAhQmtoBn\"),n=class extends A{constructor(){super(...arguments),this.startSlot=l(),this.commit=l(),this.result=l(),this.curRandomValue=l(),this.requestFirstPart=l(),this.requestSecondPart=l(),this.events={requested:P}}async commitValue(e){this.permissionCheck(),this.commit.getAndRequireEquals().assertEquals(r(0),\"Already committed\"),this.commit.set(e.hash()),await this.callZkon()}async reveal(e){this.permissionCheck(),this.result.getAndRequireEquals().assertEquals(r(0),\"reveal: Result already computed\");let a=this.curRandomValue.getAndRequireEquals();a.assertGreaterThan(r(0),\"reveal: No random value\"),this.commit.getAndRequireEquals().assertEquals(e.hash(),\"reveal: wrong commit value\"),this.checkRoundPass();let o=C.hash([e.value,a]);this.result.set(o)}async callZkon(){let e=this.requestFirstPart.getAndRequireEquals(),s=this.requestSecondPart.getAndRequireEquals(),u=await new g(E).sendRequest(this.address,e,s),o=new P({id:u,hash1:e,hash2:s});this.emitEvent(\"requested\",o)}async receiveZkonResponse(e,s){this.curRandomValue.getAndRequireEquals().assertEquals(r(0),\"receiveZkonResponse: prev random value was not consumed. Call reveal first\"),await new g(E).recordRequestFullfillment(e,s),this.curRandomValue.set(s.publicInput.dataField)}permissionCheck(){}checkRoundPass(){let e=this.startSlot.getAndRequireEquals();this.network.globalSlotSinceGenesis.requireBetween(e.add(v),k.MAXINT())}};i([d(k),t(\"design:type\",Object)],n.prototype,\"startSlot\",void 0);i([d(r),t(\"design:type\",Object)],n.prototype,\"commit\",void 0);i([d(r),t(\"design:type\",Object)],n.prototype,\"result\",void 0);i([d(r),t(\"design:type\",Object)],n.prototype,\"curRandomValue\",void 0);i([d(r),t(\"design:type\",Object)],n.prototype,\"requestFirstPart\",void 0);i([d(r),t(\"design:type\",Object)],n.prototype,\"requestSecondPart\",void 0);i([y,t(\"design:type\",Function),t(\"design:paramtypes\",[m]),t(\"design:returntype\",Promise)],n.prototype,\"commitValue\",null);i([y,t(\"design:type\",Function),t(\"design:paramtypes\",[m]),t(\"design:returntype\",Promise)],n.prototype,\"reveal\",null);i([y,t(\"design:type\",Function),t(\"design:paramtypes\",[r,R]),t(\"design:returntype\",Promise)],n.prototype,\"receiveZkonResponse\",null);var z=n;export{m as CommitValue,n as RandomManager,R as ZkonProof,j as ZkonProof_,z as default};\n"
}